# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gen_events

import flatbuffers

class MonitorPowerStartEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMonitorPowerStartEvent(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MonitorPowerStartEvent()
        x.Init(buf, n + offset)
        return x

    # MonitorPowerStartEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MonitorPowerStartEvent
    def EventCreateTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MonitorPowerStartEvent
    def Pids(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MonitorPowerStartEvent
    def PidsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MonitorPowerStartEvent
    def PidsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MonitorPowerStartEvent
    def MonitorTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # MonitorPowerStartEvent
    def MonitorTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # MonitorPowerStartEvent
    def MonitorTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MonitorPowerStartEvent
    def MonitorStartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MonitorPowerStartEvent
    def MonitorSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def MonitorPowerStartEventStart(builder): builder.StartObject(5)
def MonitorPowerStartEventAddEventCreateTs(builder, eventCreateTs): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventCreateTs), 0)
def MonitorPowerStartEventAddPids(builder, pids): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pids), 0)
def MonitorPowerStartEventStartPidsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MonitorPowerStartEventAddMonitorTypes(builder, monitorTypes): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(monitorTypes), 0)
def MonitorPowerStartEventStartMonitorTypesVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def MonitorPowerStartEventAddMonitorStartTs(builder, monitorStartTs): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(monitorStartTs), 0)
def MonitorPowerStartEventAddMonitorSeconds(builder, monitorSeconds): builder.PrependUint32Slot(4, monitorSeconds, 0)
def MonitorPowerStartEventEnd(builder): return builder.EndObject()
