import os
import zmq
import logging
import json
import sys
import time
import toml
from pyevents.events import get_plugin_socket, get_next_msg, send_quit_command
from ctevents.ctevents import socket_message_to_typed_event, send_terminate_plugin_fb_event
from ctevents import ImageStoredEvent, ImageDeletedEvent, ImageScoredEvent, PluginTerminatingEvent, PluginTerminateEvent
from filelock import FileLock

log_level = os.environ.get("DETECTION_REPORTER_LOG_LEVEL", "INFO")
logger = logging.getLogger("Detection Reporter")
if log_level == "DEBUG":
    logger.setLevel(logging.DEBUG)
elif log_level == "INFO":
    logger.setLevel(logging.INFO)
elif log_level == "WARN":
    logger.setLevel(logging.WARN)
elif log_level == "ERROR":
    logger.setLevel(logging.ERROR)
if not logger.handlers:
    formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s '
            '[in %(pathname)s:%(lineno)d]')
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    logger.addHandler(handler)

# Number of images generated by the entire application (i.e., by the image generating plugin)
total_images_generated = 0

# Whether this program has received the PLuginTerminating event from the image generating plugin
received_terminating_signal = False

uuids_with_errors = []

PORT = int(os.environ.get('DETECTION_REPORTER_PLUGIN_PORT', 6012))
OUTPUT_DIR = os.environ.get('TRAPS_DETECTION_REPORTER_OUTPUT_PATH', "/output/")
EVENTS_FILE = os.environ.get('TRAPS_DETECTED_EVENTS_FILE', 'detections.csv')
DETECTION_FILE = os.environ.get('TRAPS_DETECTION_FILE', '/traps-detection.toml')

output_file = os.path.join(OUTPUT_DIR, EVENTS_FILE)

SOCKET_TIMEOUT = 2000

def get_detection_thresholds():
    with open(DETECTION_FILE, 'r') as f:
        thresholds = toml.load(f)['thresholds']
    return thresholds

def get_socket():
    context = zmq.Context()
    return get_plugin_socket(context, PORT)  

def is_detected_image(uuid):
    with open(output_file, 'r') as f:
        for line in f:
            elems = line.strip().split(', ')[:2]
            if elems[0] == 'DETECTION' and elems[1] == uuid:
                logger.info('yes')
                return True
    return False

def update_csv(cat, uuid, **kwargs):
    """
    This function updates the detections csv file.
    """
    if cat == 'DETECTION':
        model_result = kwargs.get('model_result')
        line = f'{cat}, {uuid}, {model_result}\n'
    elif cat == 'STORING':
        image_path = kwargs.get('image_path')
        decision = kwargs.get('decision')
        line = f'{cat}, {uuid}, {image_path}, {decision}\n'
    lock = FileLock(f'{output_file}.lock')
    try:
        with open(output_file, 'a') as f:
            f.write(line)
    except FileNotFoundError:
        # for the first image, the file has not been created yet and FileNotFound is expected
        logger.error(f"File not found: {output_file}")

def main():
    done = False
    with open(output_file, 'w') as f:
        pass
    detection_threshold = get_detection_thresholds()
    while not done:
        socket = get_socket()
        try:
            message = get_next_msg(socket)
        except zmq.error.Again:
            logger.debug(f"Got a zmq.error.Again; i.e., waited {SOCKET_TIMEOUT} ms without getting a message")
            continue
        except Exception as e:
            logger.debug(f"Got exception from get_next_msg; type(e): {type(e)}; e: {e}")
            done = True 
            logger.info("Oracle monitoring plugin stopping due to timeout limit...")
            continue
        if not message:
            logger.info("No message found in get_next_msg")

        logger.info("Got a message from the event socket - Detection reporter")
        event = socket_message_to_typed_event(message)

        if isinstance(event, ImageScoredEvent):
            uuid = event.ImageUuid().decode('utf-8')
            scores = [] # event.ScoresLength()
            for i in range(event.ScoresLength()):
                label = event.Scores(i).Label().decode('utf-8')
                prob = event.Scores(i).Probability()
                if label in detection_threshold and prob > detection_threshold[label]:
                    scores.append({"label": label, "probability": prob})
            if len(scores) > 0:
                timestamp = event.EventCreateTs().decode('utf-8')
                logger.info(f"Detection reporter for {uuid} at {timestamp} with {scores}")
                update_csv('DETECTION', uuid, model_result=scores)

        elif isinstance(event, ImageStoredEvent):
            uuid = event.ImageUuid().decode('utf-8')
            ext = event.ImageFormat().decode('utf-8')
            timestamp = event.EventCreateTs().decode('utf-8')
            destination = event.Destination().decode('utf-8')
            image_path = f'{uuid}.{ext}'
            logger.info(f"Image stored {uuid} {timestamp} {destination} {image_path}")
            #update_csv('STORING', uuid, {"image_store_delete_time": timestamp, "image_decision": destination})
            if is_detected_image(uuid):
                update_csv('STORING', uuid, image_path=image_path, decision=destination)

if __name__ == '__main__':
    logger.info("Detection reporter plugin starting...")
    main()
    logger.info("Detection reporter plugin exiting...")
